#!/usr/bin/env node

// Teste da solu√ß√£o inteligente de cart√µes
require('dotenv').config({ path: '.env.local' });
const fs = require('fs');

async function testarSolucaoInteligente() {
  try {
    console.log('üß† TESTE DA SOLU√á√ÉO INTELIGENTE DE CART√ïES\n');
    
    // Ler o texto da fatura
    const analise = JSON.parse(fs.readFileSync('./analise-fatura-ocr.json', 'utf8'));
    const text = analise.textoCompleto;
    
    // Simular o que a IA deveria ver
    const relevantSection = text.substring(0, Math.min(3000, text.length));
    const cardNumbers = ['0342******9766', '0342******8752'];
    
    console.log('üìã SEC√á√ÉO RELEVANTE PARA IA:');
    console.log('=' + '='.repeat(50));
    console.log(relevantSection);
    console.log('=' + '='.repeat(50));
    
    console.log('\nüéØ N√öMEROS DE CART√ÉO:', cardNumbers);
    
    // O que a IA deveria extrair:
    console.log('\nü§ñ O QUE A IA DEVERIA IDENTIFICAR:');
    
    // Buscar manualmente na sec√ß√£o relevante
    const lines = relevantSection.split('\n');
    
    // Encontrar a linha com "N.¬∫ cart√£o" e as seguintes
    let foundTable = false;
    let cardTableStart = -1;
    
    for (let i = 0; i < lines.length; i++) {
      if (lines[i].includes('N.¬∫ cart√£o') && lines[i].includes('Nome')) {
        foundTable = true;
        cardTableStart = i;
        console.log(`‚úÖ Tabela encontrada na linha ${i}: "${lines[i]}"`);
        break;
      }
    }
    
    if (foundTable) {
      console.log('\nüìä LINHAS DA TABELA:');
      for (let i = cardTableStart; i < Math.min(cardTableStart + 10, lines.length); i++) {
        const line = lines[i].trim();
        if (line.length > 0) {
          console.log(`${i}: "${line}"`);
          
          // Verificar se cont√©m n√∫mero de cart√£o
          for (const cardNum of cardNumbers) {
            if (line.includes(cardNum.replace(/\*/g, '').slice(-4))) {
              console.log(`   ‚Üí Cont√©m cart√£o: ${cardNum}`);
            }
          }
        }
      }
    }
    
    // Extrair nomes que aparecem pr√≥ximos dos cart√µes
    console.log('\nüë§ NOMES ENCONTRADOS NO DOCUMENTO:');
    const nameRegex = /\b([A-Z]{2,}(?:\s+[A-Z]{1,3})*(?:\s+[A-Z]{2,})+)\b/g;
    const names = [...text.matchAll(nameRegex)]
      .map(m => m[1].trim())
      .filter(name => {
        const words = name.split(/\s+/);
        return words.length >= 2 && 
               words.length <= 5 && 
               !name.includes('BANCO') &&
               !name.includes('NOVO') &&
               !name.includes('EXTRATO') &&
               !name.includes('CART√ÉO') &&
               !name.includes('CAMPUS') &&
               !name.includes('AVENIDA') &&
               words.every(word => word.length >= 2);
      });
    
    const uniqueNames = [...new Set(names)];
    uniqueNames.forEach((name, index) => {
      console.log(`${index + 1}. ${name}`);
    });
    
    console.log('\nüéØ MAPEAMENTO ESPERADO:');
    console.log('Cart√£o 9766 ‚Üí ANDRE DA CRUZ DE SOUZA (titular)');
    console.log('Cart√£o 8752 ‚Üí LUANA COSTA L CRUZ (dependente)');
    
    console.log('\nüí° PROMPT SUGERIDO PARA IA:');
    console.log(`
Analisa este extrato e correlaciona cada cart√£o ao seu portador:

Cart√µes: ${cardNumbers.join(', ')}

Texto relevante:
${relevantSection.substring(0, 1000)}...

Procura por uma tabela ou lista que mostre:
- N√∫meros de cart√£o (terminados em 9766 e 8752)
- Nomes dos portadores correspondentes

Responde apenas JSON:
[
  {"cardNumber": "0342******9766", "holderName": "NOME_EXATO"},
  {"cardNumber": "0342******8752", "holderName": "NOME_EXATO"}
]
`);
    
  } catch (error) {
    console.error('‚ùå Erro:', error);
  }
}

testarSolucaoInteligente();
