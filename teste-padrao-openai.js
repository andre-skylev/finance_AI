const fs = require('fs');
const FormData = require('form-data');
const { default: fetch } = require('node-fetch');

async function testDefaultOpenAI() {
    console.log('üß™ Testando se OpenAI est√° sendo usado por padr√£o...\n');
    
    try {
        const pdfPath = '/Users/andrecruz/CODES/finance_AI/teste-fatura.pdf';
        if (!fs.existsSync(pdfPath)) {
            console.error('‚ùå Arquivo teste-fatura.pdf n√£o encontrado');
            return;
        }
        
        const formData = new FormData();
        formData.append('file', fs.createReadStream(pdfPath));
        formData.append('test', '1'); // Ativar modo de teste
        // N√ÉO vamos enviar useOpenAI=true para testar se est√° sendo usado por padr√£o
        
        console.log('üì§ Enviando PDF sem especificar useOpenAI...');
        
        const response = await fetch('http://localhost:3000/api/pdf-upload', {
            method: 'POST',
            body: formData,
            headers: {
                ...formData.getHeaders(),
                'Authorization': 'Bearer test-token' // Token b√°sico para passar a autentica√ß√£o
            }
        });
        
        console.log('üì• Status da resposta:', response.status);
        
        if (response.ok) {
            const result = await response.json();
            
            console.log('‚úÖ Resposta recebida!\n');
            
            // Verificar se OpenAI foi usado
            if (result.bankInfo && result.bankInfo.openAIUsed) {
                console.log('üéâ SUCCESS! OpenAI foi usado por padr√£o!');
                console.log(`   M√©todo de parsing: ${result.bankInfo.parsingMethod}`);
                console.log(`   Banco/Loja detectada: ${result.bankInfo.bank}`);
                
                if (result.bankInfo.openAIResponse) {
                    const ai = result.bankInfo.openAIResponse;
                    console.log(`   Tipo de documento: ${ai.documentType}`);
                    console.log(`   Estabelecimento: ${ai.establishment?.name}`);
                    console.log(`   Total: ‚Ç¨${ai.totalAmount}`);
                    console.log(`   Confian√ßa: ${ai.metadata?.confidence}`);
                }
                
                if (result.transactions && result.transactions.length > 0) {
                    console.log(`\nüí∞ ${result.transactions.length} transa√ß√µes extra√≠das`);
                } else if (result.receipts && result.receipts.length > 0) {
                    console.log(`\nüßæ ${result.receipts.length} recibos extra√≠dos`);
                }
                
            } else {
                console.log('‚ùå OpenAI N√ÉO foi usado. Sistema ainda usando regex.');
                console.log(`   M√©todo usado: ${result.bankInfo?.parsingMethod || 'Desconhecido'}`);
            }
            
        } else {
            const error = await response.json();
            console.error('‚ùå Erro na resposta:', error);
        }
        
    } catch (error) {
        console.error('‚ùå Erro durante o teste:', error.message);
    }
}

testDefaultOpenAI();
